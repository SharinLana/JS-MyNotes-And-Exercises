/* Cycle While in JS */

//Циклы используются для того, чтобы некоторый участок кода выполнился несколько раз подряд.

// Цикл While будет выполняться до тех пор, пока истинно выражение, переданное ему параметром
/* while ( пока выражение истинно ) {
	выполняем этот код циклически;
	в начале каждого цикла проверяем выражение в круглых 
		скобках 
}
Цикл закончится, когда выражение перестанет быть истинным. 
Если оно было ложным изначально - то он не выполнится ни разу!
*/



//Последовательно выведем с помощью цикла while числа от одного до пяти:
let i = 1; // задаем какую-нибудь переменную (она называется СЧЕТЧИК ЦИКЛА - cycle counter)
//для счетчиков принято испольовать буквы i, j, k
while (i <= 5) {
	console.log(i); // выводим содержимое i в консоль
	i++; // увеличиваем i на единицу при каждом проходе (каждой ИТЕРАЦИИ) цикла
    //всего в этом цикле получится 4 ИТЕРАЦИИ (увеличиваем i  c 1 до 5)
}


let j = 1;
while (j <= 100) {
    console.log(j); //если поставить console.log после j++; то цикл пройдет еще одну итерацию после 
    //100 и тогда остановится. Поэтому, ели цель - вывести на экран числа ДО 100, то console.log 
    //нужно ставить перед j++;
    j++;
}


let k = 11;
while (k <=33) {
    console.log(k);
    k++;
}


//БОЛЕЕ СЛОЖНЫЙ ЦИКЛ (прибавляем не 1 к счетчику, а любую другую цифру)

let i2 = 2;
while (i2 <= 10) {
    console.log(i2);
    i2 += 2; // увеличиваем i на 2 при каждом проходе цикла
}

let k2 = 0;
while (k2 <= 100) {
    console.log(k2);
    k2 += 2; //выведет все четные числа в промежутке от 0 до 100
}

let j2 = 1;
while (j2 <= 99) {
    console.log(j2);
    j2 += 2; //выведет все нечетные числа в промежутке от 1 до 99
}


//МИНУСОВОЙ ОТСЧЕТ/ Cowntdown (--)

let i3 = 10;
while (i3 >= 1) {
    console.log( i3);
    i3--;
}

let j3 = 30;
while (j3 >= 0) {
    console.log(j3);
    j3--;
}


//БЕСКОНЕЧНОСТЬ ЦИКЛА 
//Цикл while может выполняться бесконечно (это приведет к зависанию скрипта и страницы браузера), 
//достаточно передать ему выражение, которое никогда не станет ложным.
/*
let test = true;
while (test === true) {
	
		Написанный здесь код будет выполняться "вечно"
		(пока скрипт не будет остановлен принудительно).
		Не стоит это повторять - это приведет к зависанию
		страницы браузера!
	
}
*/
//или так (если программист забыл сделать увеличение счетчика в цикле)
//Я специально закомментировала код, чтобы он не привел к зависанию браузера
/*
let i4 = 1;
while (i4 <= 10) {
	console.log(i4);
}
*/

//или так (программист в условии ошибся и вместо ++ написал --, сделав цикл бесконечным)
/*
let i = 1;
while (i <= 10) {
	console.log(i);
	i--; // перепутал ++ и --
}
*/


//ЦИКЛ НЕ ЗАПУСКАЕТСЯ
//Это происходит в случае, если условие изначально неверно
let i4 = 1;
while (i4 >= 10) {
    console.log(i4);
    i4++; // цикл не запустится, т.к. 1 < 10
}


//ЦИКЛ БЕЗ ЗАДАННОГО КОЛИЧЕСТВА ИТЕРАЦИЙ

//Бывают задачи, в которых количество итераций цикла не известно заранее. 
//К примеру: дано число, нужно делить его на 2 столько раз, пока результат не станет меньше 10. 
//Нужно вывести число, которое при этом получится.
//В этом случае мы не знаем количество итераций. 
//Не беда - сделаем условием цикла условие пока число больше 10:
let number = 500;
while (number > 10) {
    number /= 2;
}
console.log(number); //7.8125 

//Задача: Дано число num с неким начальным значением. 
//Умножайте его на 3 столько раз, пока результат умножения не станет больше 1000. 
//Какое число получится? Посчитайте количество итераций, необходимых для этого.

let number1 = 18;
while (number1 <= 1000) {
    number1 *= 3;
    console.log(number1); // так мы можем увидеть количество итераций цикла
}
console.log(number1); //1458



//ПРАКТИКА

let a = 10;
while (a >= 0) {
	console.log(a);
	a--;
}


let b = 10;
while (b >= 1) {
	console.log(b);
	b--;
}


let c = 10;
while (c >= 1) {
	console.log(c);
	c--;
}



