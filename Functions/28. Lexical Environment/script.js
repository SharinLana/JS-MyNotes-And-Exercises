/*
Все внешние, доступные функции переменные, 
называются ее лексическим окружением (англ. LexicalEnvironment).
*/

let num = 1; // функция в этот момент узнает, что num = 1
func(); // выведет 1

function func() {
	alert(num);
}

func(); // выведет 1
num = 2; // функция в этот момент узнает, что num = 2
func(); // выведет 2



/*
Когда мы пытаемся обратится к какой-либо переменной внутри функции, 
эта переменная вначале ищется среди локальных переменных функции и, 
если такой переменной там нет, то ищется в лексическом окружении функции.

Если родительская функция имеет какие-либо переменные, 
то эти переменные будут содержаться в лексическом окружении возвращаемой функции:
*/

function test() {
	let num = 1; // переменная родительской функции
	
	return function() {
		// лексическое окружение = {num: 1}
        alert(num);
	}
}
let func = test();
func(); // выведет 1

//Если же просто попытаться вывести переменную num вне функции - она будет недоступна:
alert(num); // переменная num тут недоступна


/*
Как вы видите, локальная переменная num привязалась к лексическому окружению нашей функции 
и теперь, вызвав в любом месте кода эту функцию, мы сможем получить значение переменной num, 
даже если в месте вызова сама по себе эта переменная и недоступна.

На самом деле аналогичного результата можно добиться, сделав переменную num глобальной.
*/

