/*
Trepachev:
В предыдущих примерах quantifiers действовали только на один символ, 
который стоял перед ними. 
Что делать, если мы хотим подействовать им на несколько символов?

Для этого существуют группирующие скобки ')' and '('. 
Они работают так: если что-то стоит в группирующих скобках 
и сразу после ')' стоит quantifier ('+' or '*' or '?') - 
он подействует на все, что стоит внутри скобок.

*/

// Task 1
// В следующем примере шаблон поиска выглядит так: 
// буква 'x', далее строка 'ab' один или более раз, потом буква 'x'
let string = 'xabx xababx xaabbx';
let res = string.replace(/x(ab)+x/g, '!');
console.log(res); // ! ! xaabbx


// Task 2
// Дана строка
// Напишите регулярку, которая найдет строки по шаблону: 
// строка 'ab' повторяется 1 или более раз.
let string2 = 'ab abab abab abababab abea';
let res2 = string2.replace(/(ab)+\b/g, '!'); // \b is a Word boundary
console.log(res2); // ! ! ! ! abea



/*

Несохраняющие скобки

Скобки ( ) выполняют две функции - 
группировка символов и функцию кармана. 

А что делать, если нам нужно сгруппировать, 
но в карман не класть?

Для решения такой проблемы 
придуманы специальные несохраняющие скобки (?: ) - 
они группируют, но не кладут в карман.

*/

// Task 3
// Сделаем так, чтобы первая пара скобок 
// только группировала, но не клала в карман:
let str3 = 'abab123';
let res3 = str3.match(/(?:ab)+([0-9]+)/);
console.log(res3) ;  // (2) ['abab123', '123', index: 0, input: 'abab123', groups: undefined]
console.log(res3[1]); // 123
