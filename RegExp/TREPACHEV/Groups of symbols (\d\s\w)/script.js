/*
Существуют специальные команды, 
которые позволяют выбрать сразу целые группы символов. 

Команда \d означает цифру от 0 до 9. 

Команда \w обозначает цифру, латинскую букву или знак подчеркивания.

Команда \s обозначает пробел или пробельный символ: 
пробел, перевод строки, табуляцию. 

Можно инвертировать значение команды, 
написав большую букву:
например, если \d - цифра, то \D - не цифра.
*/

// Task 1
// Давайте найдем все цифры
let str = '1 12 123';
let res = str.replace(/\d/g, '!');
console.log(res); // ! !! !!!


// Task 2
// Quantifiers считают команды-группы одним целым, 
// то есть группирующие скобки не нужны. 
// В следующем примере шаблон поиска выглядит так: 
// цифра от 0 до 9 один или более раз
let str2 = '1 12 123 abc @@@';
let res2 = str2.replace(/\d+/g, '!');
console.log(res2); // ! ! ! abc @@@


// Task 3
// В следующем примере шаблон поиска выглядит так: 
// все что угодно один или более раз, но не цифра от 0 до 9:
let str3 = '123abc3@@';
let res3 = str3.replace(/\D+/g, '!');
console.log(res3); // 123!3!


// Task 4
// В данном примере шаблон поиска выглядит так: 
// пробельный символ один раз:
let str4 = '1 12 123 abc @@@';
let res4 = str4.replace(/\s/g, '!');
console.log(res4); // 1!12!123!abc!@@@


// Task 5
// В данном примере шаблон поиска выглядит так: 
// НЕ пробельный символ один или более раз. 
// Все подстроки, разделенные пробелами, заменятся на '!':
let str5 = '1 12 123 abc @@@';
let res5 = str5.replace(/\S+/g, '!');
console.log(res5); // ! ! ! ! !


// Task 6
// В данном примере шаблон поиска выглядит так: 
// цифра или буква один или более раз. 
// Все подстроки, состоящие из цифр и букв, заменятся на '!':
let str6 = '1 12 123a Abc @@@';
let res6 = str6.replace(/\w+/g, '!');
console.log(res6); // ! ! ! ! @@@


// Task 7
// В данном примере шаблон поиска выглядит так: 
// НЕ цифра и НЕ буква один или более раз. 
// Под данное определение в нашем случае попадает 
// '@@@' и все пробелы (они ведь тоже не цифры и не буквы). 
// Обратите внимание на то, что в конце один '!' - 
// в него преобразовалась строка ' @@@' - с пробелом впереди:
let str7 = '1 12 123 Abc @@@';
let res7 = str7.replace(/\W+/g, '!');
console.log(res7); // 1!12!123!Abc!


// Task 8
// Дана строка
// Напишите регулярку, которая найдет строки, 
// в которых по краям стоят буквы 'a', а между ними одна цифра.
let str8 = 'a1a a2a a3a a4a a5a aba aca';
let res8 = str8.replace(/a\da/g, '!');
console.log(res8); // ! ! ! ! ! aba aca


// Task 9
// Дана строка
// Напишите регулярку, которая найдет строки, 
// в которых по краям стоят буквы 'a', 
// а между ними любое количество цифр.
let str9 = 'a1a a22a a333a a4444a a55555a aba aca';
let res9 = str9.replace(/a\d+a/g, '!');
console.log(res9); // ! ! ! ! ! aba aca


// Task 10
// Дана строка
// Напишите регулярку, которая найдет строки, 
// в которых по краям стоят буквы 'a', 
// а между ними любое количество цифр 
// (в том числе и ноль цифр, то есть строка 'aa').
let str10 = 'aa a1a a22a a333a a4444a a55555a aba aca'; 
let res10 = str10.replace(/a\d*a/g, '!');
console.log(res10); // ! ! ! ! ! ! aba aca


// Task 11
// Дана строка
// Напишите регулярку, которая найдет строки следующего вида: 
// по краям стоят буквы 'a' и 'b', а между ними - не число.
let str11 = 'avb a1b a2b a3b a4b a5b abb acb';
let res11 = str11.replace(/a\Db/g, '!');
console.log(res11); // ! a1b a2b a3b a4b a5b ! !


// Task 12
// Дана строка
// Напишите регулярку, которая найдет строки следующего вида: 
// по краям стоят буквы 'a' и 'b', 
// а между ними - не буква и не цифра.
let str12 = 'ave a#b a2b a$b a4b a5b a-b acb';
let res12 = str12.replace(/a\Wb/g, '!');
console.log(res12); // ave ! a2b ! a4b a5b ! acb


// Task 13
// Дана строка
// Напишите регулярку, которая заменит все пробелы на '!'.
let str13 = 'ave a#a a2a a$a a4a a5a a-a aca';
let res13 = str13.replace(/\s/g, '!');
console.log(res13); // ave!a#a!a2a!a$a!a4a!a5a!a-a!aca