/*
Trepachev:

Предположим, что мы хотим сделать так, чтобы спецсимвол обозначал сам себя. 
Для этого его нужно экранировать с помощью обратного слеша. 

Исключение - цифры, их нельзя экранировать

Являются спецсимволами: $ ^ . * + ? \ / {} [] () |
Не являются спецсимволами: @ : , ' " ; - _ = < > % # ~ `& !
*/

//Task 1
let str = 'a+x ax aax aaax';
let res = str.replace(/a\+x/g, '!');
console.log(res); // ! ax aax aaax

// Task 2
let str2 = 'a.x abx azx';
let res2 = str2.replace(/a\.x/g, "!");
console.log(res2); //! abx azx

// Task 3
// Дана строка
// Напишите регулярку, которая найдет строку 'a.a', не захватив остальные.
let str3 = 'a.a aba aea';
let res3 = str3.replace(/a\.a/g, '!');
console.log(res3); // ! aba aea

// Task 4
// Дана строка
// Напишите регулярку, которая найдет строку '2+3', не захватив остальные.
let str4 = '2+3 223 2223';
let res4 = str4.replace(/2\+3/g, '!');
console.log(res4); // ! 223 2223

// Task 5
// Дана строка
// Напишите регулярку, которая найдет строки 
// '2+3', '2++3', '2+++3', 
// не захватив остальные (+ может быть любое количество).
let str5 = '23 2+3 2++3 2+++3 345 567';
let res5 = str5.replace(/2\++3/g, '!');
console.log(res5); // 23 ! ! ! 345 567

// Task 6
// Дана строка
// Напишите регулярку, которая найдет строки 
// '23', '2+3', '2++3', '2+++3', не захватив остальные.
let str6 = '23 2+3 2++3 2+++3 445 677';
let res6 = str6.replace(/2\+*3/g, '!');
console.log(res6); // ! ! ! ! 445 677

// Task 7
// Дана строка
// Напишите регулярку, которая найдет строки 
// '*q+', '*qq+', '*qqq+', не захватив остальные.
let str7 = '*+ *q+ *qq+ *qqq+ *qqq qqq+';
let res7 = str7.replace(/\*q+\+/g, '!');
console.log(res7); // *+ ! ! ! *qqq qqq+

// Task 8
// Дана строка
// Напишите регулярку, которая найдет строки 
// в квадратных скобках и заменят их на '!'.
let str8 = '[abc] {abc} abc (abc) [abc]';
let res8 = str8.replace(/(\[abc\])/g, '!');
console.log(res8); // ! {abc} abc (abc) !

