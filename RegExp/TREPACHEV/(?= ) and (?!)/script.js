/*

Позитивный и негативный просмотр в JavaScript

Иногда нужно решить задачу такого типа: 
найти строку 'aaa' и заменить ее на '!', 
но только если после 'aaa' стоит 'x', 
а сам 'x' при этом не заменять. 

Если мы попытаемся решить задачу 'в лоб', то у нас ничего не выйдет:
'aaax baaa'.replace(/aaax/g, '!'); // вернет '! baaa', а хотели '!x baaa' 

Позитивный просмотр вперед
Для решения задачи нужен способ сказать, 
что 'x' не следует заменять. 
Делается это с помощью специальных скобок (?= ), 
которые просто смотрят, но не забирают с собой.

Во многих языках программирования существует также просмотр назад. 
К сожалению, в JavaScript пока нет такой опции 
(но возможно в будущем появится).

*/

'aaax aaab'.replace(/aaa(?=x)/g, '!'); // вернет '!x aaab'



//Негативный просмотр вперед (?! ) - 
//он, наоборот, говорит, что чего-то должно не быть:

// Task 1
// Если после 'aaa' стоит НЕ 'x', тогда заменим на '!': 
'aaax aaab'.replace(/aaa(?!x)/g, '!'); // вернет 'aaax !b'


// Task 2
// Дана строка, содержащая имена функций
// Получите массив имен функций из строки.
let str = 'func1() func2() func3()';
let res = str.match(/(func[1-9](?=()))/g);
console.log(res); // (3) ['func1', 'func2', 'func3']


// Task 3
// Дана строка с тегом
// Получите массив имен атрибутов этого тега.
let str2 = '<a href="" class="eee" id="zzz">';
let res2 = str2.match(/([a-z]+(?=\="))/g);
console.log(res2); // (3) ['href', 'class', 'id']