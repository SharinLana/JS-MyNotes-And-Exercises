/* Регулярные выражения – мощное средство поиска и замены в строке. 

Существует два синтаксиса для создания регулярного выражения.
«Длинный» синтаксис:
*/

//regexp = new RegExp("шаблон", "флаги");

//И короткий синтаксис, использующий слеши "/". 
//Они играют здесь ту же роль, что и кавычки для обозначения строк:
//regexp = /шаблон/; // без флагов
//regexp = /шаблон/gmi; // с флагами gmi 

/*
Слеши используются, когда мы на момент написания кода точно знаем, 
каким будет регулярное выражение – и это большинство ситуаций. 
А new RegExp – когда мы хотим создать регулярное выражение «на лету» 
из динамически сгенерированной строки, например:

*/
// let tag = prompt("Какой тег вы хотите найти?", "h2");
// let regexp = new RegExp(`<${tag}>`); // то же, что /<h2>/  при ответе "h2" на prompt выше


/* Flags 
В JavaScript их всего шесть:
i - С этим флагом поиск не зависит от регистра: нет разницы между A и a
g - С этим флагом поиск ищет все совпадения, без него – только первое.
m - Многострочный режим
s - Включает режим «dotall», при котором точка . может соответствовать символу перевода строки \n
u - Включает полную поддержку Юникода. Флаг разрешает корректную обработку суррогатных пар
y - Режим поиска на конкретной позиции в тексте
*/

/* Methods 
использование регулярных выражений интегрировано в методы строк.
*/
//Метод str.match(regexp) для строки str возвращает совпадения с регулярным выражением regexp.
//У него есть три режима работы:

//1. Если у регулярного выражения есть флаг g, то он возвращает массив всех совпадений:
let str = "Любо, братцы, любо!";
console.log( str.match(/любо/gi) ); // Любо,любо (массив из 2х подстрок-совпадений)

//2. Если такого флага нет, то возвращает только первое совпадение 
//в виде массива, в котором по индексу 0 находится совпадение, 
//и есть свойства с дополнительной информацией о нём:
let str2 = "Любо, братцы, любо!";
let result = str2.match(/любо/i);
console.log(result); // ['Любо', index: 0, input: 'Любо, братцы, любо!', groups: undefined]
console.log(result.input); // Любо, братцы, любо!

//3. И, наконец, если совпадений нет, то, вне зависимости от наличия флага g, возвращается null.
//Это очень важный нюанс. При отсутствии совпадений возвращается не пустой массив, а именно null. 
let str3 = "Любо, братцы, любо!";
let result3 = str3.match(/love/); 
console.log(result3); // null
//Если хочется, чтобы результатом всегда был массив, можно написать так:
let str4 = "Любо, братцы, любо!";
let result4 = str4.match(/love/) || []; 
console.log(result4); // []


//Метод str.replace(regexp, replacement) заменяет совпадения с regexp в строке str 
//на replacement (все, если есть флаг g, иначе только первое).
let str5 = 'We will, we will';
let result5 = str5.replace(/we/i, 'I');
console.log(result5); // I will, we will

let str6 = 'We will, we will';
let result6 = str6.replace(/we/gi, 'I');
console.log(result6); // I will, I will

/*
Спецсимволы	for Replace:
$& -	вставляет всё найденное совпадение
$` -	вставляет часть строки до совпадения
$' -	вставляет часть строки после совпадения
$n -	если n это 1-2 значное число, вставляет содержимое n-й скобочной группы регулярного выражения, больше об этом в главе Скобочные группы
$<name> -	вставляет содержимое скобочной группы с именем name, также изучим в главе Скобочные группы
$$ -	вставляет символ "$"
*/

let result7 = str6.replace(/will/gi, '$& and they too');
console.log(result7); // We will and they too, we will and they too

let result8 = str6.replace(/will/i, '$`');
console.log(result8); //  We We, we will

let result9 = str6.replace(/will/i, `$'`);
console.log(result9); //  We , we will, we will

let result10 = str6.replace(/will/i, '$$');
console.log(result10); //  We $, we will



//Метод regexp.test(str) проверяет, есть ли хоть одно совпадение, 
//если да, то возвращает true, иначе false.
let str11 = 'I love JavaScript';
let regexp = /javascript/i;
console.log(regexp.test(str11)); // true
